<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace common\components;
use Yii;
use yii\base\InvalidConfigException;
use yii\base\InvalidRouteException;
use yii\web\Controller;
use hail812\adminlte3\widgets\FlashAlert;
use yii\web\Response;
use kartik\widgets\ActiveForm;
use Exception;
use common\components\authclient\KeyCloakClient;
use yii\base\Action;
use yii\web\BadRequestHttpException;
/**
 * Description of BasicController
 *
 * @author eliel
 */
class BasicController extends Controller {
    const ALERT_TYPE_INFO = 'info';
    const ALERT_TYPE_SUCCESS = 'success';
    const ALERT_TYPE_ERROR = 'error';
    const ALERT_TYPE_DANGER = 'danger';
    const ALERT_TYPE_WARNING = 'warning';
    protected $defaultModel = null;
    protected $loadedModel = null;

    public function getErrors($errors = [], $encode = true){
        return Yii::$app->customFunctions->getErrors($errors, $encode);
    }
    
    public function setFlashMessage($title = 'Message', $message = '', $type = self::ALERT_TYPE_INFO, $errors = []){
        !empty($errors) ? Yii::$app->session->setFlash(static::ALERT_TYPE_ERROR, $errors): Yii::$app->session->setFlash($type, $message);
    }
    
    public function actionGetdynamicfield(){
        $response = [];
        \Yii::$app->response->format = Response::FORMAT_JSON;
        try {
            $this->loadedModel = $this->defaultModel->getModel();
            if (Yii::$app->request->isAjax && $this->defaultModel) {
                $post = Yii::$app->request->post();
                $form = \backend\custom\ActiveForm::begin(['withFormTag' => false]);
                $this->loadedModel->load($post);
                $this->loadedModel->setForm($form);
                return array_merge(['success' => true ] , $this->loadedModel->cloneField());
            } else {
                throwException(new Exception('Error en la solicitud',1000));
            }
        } catch(Exception $ex){
            return [
                'success' => false,
                'code' => $ex->getCode(),
                'message' => $ex->getMessage(),
                'errors' => $this->loadedModel ? $this->loadedModel->errors : [],
            ];
        }
    }

    /**
     * @param Action $action
     * @return bool
     * @throws BadRequestHttpException
     * @throws InvalidRouteException
     */
    public function beforeAction($action)
    {
        if(Yii::$app->getUser()->isGuest)
            throw new InvalidConfigException('User not identified');
        //KeyCloakClient::refreshToken();
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
}
