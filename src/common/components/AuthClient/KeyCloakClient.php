<?php
namespace common\components\authclient;

use Yii;
use yii\authclient\Collection;
use yii\authclient\InvalidResponseException;
use yii\authclient\OAuthToken;
use yii\authclient\OpenIdConnect;
use yii\base\InvalidConfigException;
use yii\web\HttpException;
use yii\web\NotFoundHttpException;
use yii\db\Connection;

/**
 * Keycloak
 * @package common\components\authclient
 * @property string $logoutUrl
 * @property Connection $db
 */
class KeyCloakClient extends \yii\authclient\OpenIdConnect
{
    public $logoutUrl;
    public $db;
    const SESSION_STATE_KEY_PREFIX = 'session_authstate_';

    /**
     * @throws InvalidConfigException
     */
    public function init()
    {
        if(empty($this->db)){
            throw new InvalidConfigException('DB Connection must be set');
        }
        if(empty($this->logoutUrl)){
            throw new InvalidConfigException('LogoutUrl must be set');
        }
        if( !($this->db instanceof Connection)){
            $this->db = Yii::$app->get($this->db);
        }
        parent::init(); // TODO: Change the autogenerated stub
    }
    /**
     * Initializes authenticated user attributes.
     * @return array|null
     * @throws HttpException
     */
    protected function initUserAttributes()
    {
        $token = $this->getAccessToken()->getToken();
        return $this->loadJws($token);
    }

    protected function defaultName()
    {
        return 'keycloak';
    }
    protected function defaultTitle()
    {
        return 'Keycloak';
    }
    public static function refreshToken(){
        if (!Yii::$app->user->getIsGuest()) {
            $client = self::getInstance();
            if ($client->getSsoSession() != null) {
                try {
                    if ($client->getAccessToken()->getIsExpired()) {
                        $client->refreshAccessToken($client->getAccessToken());
                    }
                }catch (InvalidResponseException $e) {
                    $client->removeSsoSession();
                    Yii::$app->user->logout();
                }
            } else {
                Yii::$app->user->logout();
            }
        }
    }
    private static function getSessionStateKey($sessionState) {
        return self::SESSION_STATE_KEY_PREFIX . $sessionState;
    }
    private function removeSsoSession() {
        $state = $this->getSessionState();
        if (!empty($state)) {
            $this->db->del(self::getSessionStateKey($state));
        }
    }
    private function getSsoSession() {
        $state = $this->getSessionState();
        if (!empty($state)) {
            return $this->db->get(self::getSessionStateKey($state));
        }
        return null;
    }

    public function setSsoSession() {
        $state = $this->getSessionState();
        if (!empty($state)) {
            $this->db->set(self::getSessionStateKey($state), Yii::$app->session->getId());
        }
    }

    public function getSessionState(){
        /** @var OAuthToken $token */
        $token = $this->getState('token');
        return $token->getParam('session_state');
    }

    /**
     * @return Keycloak
     * @throws NotFoundHttpException
     * @throws InvalidConfigException
     */
    public static function getInstance() {
        /* @var $collection Collection */
        $collection = Yii::$app->get('authClientCollection');
        if (!$collection->hasClient('keycloak')) {
            throw new NotFoundHttpException("Unknown auth client 'keycloak");
        }

        /** @var Keycloak $client */
        $client = $collection->getClient('keycloak');
        return $client;
    }

    public static function logout($redirect) {
        if (!Yii::$app->user->getIsGuest()) {
            $client = self::getInstance();
            $client->removeSsoSession();
            $logoutUrl = $client->logoutUrl. "?redirect_uri=". urlencode($redirect);
            Yii::$app->user->logout();
            return Yii::$app->response->redirect($logoutUrl);
        }
        return Yii::$app->response->redirect($redirect);
    }

    /**
     * @param $token
     * @return array
     * @throws HttpException
     */
    public function loadAndVerifyLogoutToken($token) {
        return $this->loadJws($token);
    }
}