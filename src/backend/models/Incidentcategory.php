<?php

namespace backend\models;

use backend\models\traits\Incidentcategorytrait;
use common\models\Type;
use Yii;
use common\models\State;
use \yii\helpers\ArrayHelper;
use yii\helpers\StringHelper;
use kartik\helpers\Html;
use Exception;


/**
 * This is the model class for table "incidentcategory".
 *
 * @property int $Id
 * @property string $Name
 * @property string $Code
 * @property int $IdParent
 * @property int $IdState
 * @property int $IdType
 * @property string $Description
 *
 * @property Activetype[] $activetypes
 * @property Incident[] $incidents
 * @property Incidentcategory $parent
 * @property Incidentcategory[] $incidentcategories
 * @property State $state
 * @property Type $type
 */
class Incidentcategory extends \yii\db\ActiveRecord
{
    use Incidentcategorytrait;
    const STATUS_ACTIVE = 'ACT';
    const STATUS_INACTIVE = 'INA';

    const SCENARIO_UPLOAD = 'upload';

    const KEYWORD_PARENT_CATEGORY = 'Parentcategory';
    const KEYWORD_SUBCATEGORY = 'Subcategory';
    const KEYWORD_CATEGORY = 'Category';

    private $level = 0;
    protected $options = [];
    protected $item = [];
    public $create = FALSE;
    public $update = FALSE;
    public $delete = FALSE;
    public $controllerName =  'incidentcategory';
    public $uploadFile = null;

    private $rowcolor = ['','bg-success','bg-warning','bg-info','bg-primary','bg-danger'];
    
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'incidentcategory';
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios[self::SCENARIO_UPLOAD] = [
            'Id', 'Name', 'Code', 'IdParent', 'IdState', 'IdType', 'Description'
        ];
        return $scenarios;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['Name', 'Code'], 'required', 'on' => self::SCENARIO_UPLOAD],
            [['Name', 'Code', 'IdState', 'IdType'], 'required', 'on' => 'default'],
            [['IdParent', 'IdState', 'IdType'], 'integer'],
            [['Name'], 'string', 'max' => 100 ],
            [['Code'], 'string', 'max' => 20 ],
            [['Code'], 'unique'],
            [['Description'], 'string', 'max' => 500 ],
            [['IdParent'], 'exist', 'skipOnError' => true, 'targetClass' => Incidentcategory::class, 'targetAttribute' => ['IdParent' => 'Id']],
            [['IdState'], 'exist', 'skipOnError' => true, 'targetClass' => State::class, 'targetAttribute' => ['IdState' => 'Id']],
            [['IdType'], 'exist', 'skipOnError' => true, 'targetClass' => Type::class, 'targetAttribute' => ['IdType' => 'Id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'Id' => 'ID',
            'Name' => 'Nombre',
            'Code' => 'Código',
            'IdParent' => 'Padre',
            'IdState' => 'Estado',
            'IdType' => 'Tipo',
            'Description' => 'Descripción',
            'uploadFile' => 'Archivo de Carga',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getActivetypes()
    {
        return $this->hasMany(Activetype::class, ['IdCategoryType' => 'Id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIncidents()
    {
        return $this->hasMany(Incident::class, ['IdCategoryType' => 'Id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(Incidentcategory::class, ['Id' => 'IdParent']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getType()
    {
        return $this->hasOne(Type::class, ['Id' => 'IdType']);
    }

    public function getTypes(){
        try {
            $droptions = Type::find()
                ->where([
                    'KeyWord'=> StringHelper::basename(self::class)
                ])
                ->orderBy([
                    'Sort' => SORT_ASC
                ])
                ->asArray()->all();
            return ArrayHelper::map($droptions, 'Id', 'Name');
        } catch (Exception $ex) {
            throw $ex;
        }
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIncidentcategories()
    {
        return $this->hasMany(Incidentcategory::class, ['IdParent' => 'Id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getState()
    {
        return $this->hasOne(State::class, ['Id' => 'IdState']);
    }
    
    public function getStates(){
        try {
            $droptions = State::findAll(['KeyWord'=>StringHelper::basename(self::class)]);
            return ArrayHelper::map($droptions, 'Id', 'Name');
        } catch (Exception $ex) {
            throw $ex;
        }
    }

    /**
     * @throws Exception
     */
    public static function getList($q = null, $idparent = null){
        $query = self::find()
            ->select(['Id as id',"Name as text"]);
        if( !empty($q) ){
            $query->where(['like',"Name", $q]);
        }
        //if( $idparent ){
        $query->andWhere(['IdParent' => $idparent]);
        //}
        return $query->asArray()
            ->all();
    }

    public function getChildrenLabel(){
        try {
            if( $this->IdType ){
                switch ( $this->type->Code ){
                    case self::KEYWORD_PARENT_CATEGORY :
                        return Yii::t('system', 'Subcategories');
                    case self::KEYWORD_SUBCATEGORY :
                        return Yii::t('system', 'Categories');
                    default:
                        return '';

                }
            }
        } catch (Exception $exception ){
            throw $exception;
        }
    }
}
