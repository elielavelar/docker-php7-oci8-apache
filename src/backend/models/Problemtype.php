<?php

namespace backend\models;

use backend\models\traits\Problemtypetrait;
use Yii;
use common\models\Type;
use common\models\State;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\helpers\StringHelper;
use yii\helpers\ArrayHelper;
use Exception;

/**
 * This is the model class for table "problemtype".
 *
 * @property int $Id
 * @property string $Name
 * @property int $IdComponentType
 * @property string $Code
 * @property string $Description
 * @property int $IdActiveType
 * @property int $IdState
 *
 * @property Activetype $activeType
 * @property Type $componentType
 * @property Problemtypesolution[] $solutions
 * @property State $state
 */
class Problemtype extends \yii\db\ActiveRecord
{
    use Problemtypetrait;
    const STATE_ACTIVE = 'ACT';
    const STATE_INACTIVE = 'INA';

    const SCENARIO_DEFAULT = 'default';
    const SCENARIO_UPLOAD = 'upload';
    public $uploadFile = null;

    const COMPONENT_HARDWARE = 'HW';
    const COMPONENT_SOFTWARE = 'SW';
    const COMPONENT_UNDEFINED = 'ND';
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'problemtype';
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios[ self::SCENARIO_UPLOAD ] = [
            'Id', 'IdComponentType', 'Code', 'IdState', 'IdActiveType', 'Description'
        ];
        return $scenarios;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['Name', 'IdComponentType', 'IdActiveType', 'IdState'], 'required', 'on' => self::SCENARIO_DEFAULT],
            [['Name', 'IdComponentType', 'IdActiveType'], 'required', 'on' => self::SCENARIO_UPLOAD],
            [['Name', 'IdComponentType', 'IdActiveType', 'IdState'], 'required'],
            [['IdComponentType', 'IdActiveType', 'IdState'], 'integer'],
            [['Name'], 'string', 'max' => 150],
            [['Code'], 'string', 'max' => 10],
            [['Code'], 'filter','filter'=>'trim'],
            [['Code'], 'default'],
            [['Code'], 'validateCode'],
            [['Description'], 'string', 'max' => 500],
            [['IdActiveType'], 'exist', 'skipOnError' => true, 'targetClass' => Activetype::class, 'targetAttribute' => ['IdActiveType' => 'Id']],
            [['IdComponentType'], 'exist', 'skipOnError' => true, 'targetClass' => Type::class, 'targetAttribute' => ['IdComponentType' => 'Id']],
            [['IdState'], 'exist', 'skipOnError' => true, 'targetClass' => State::class, 'targetAttribute' => ['IdState' => 'Id']],
        ];
    }

    public function validateCode($attribute, $params){
        return true;
    }
    
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'Id' => 'ID',
            'Name' => 'Nombre',
            'IdComponentType' => 'Tipo Componente',
            'Code' => 'Código',
            'Description' => 'Descripción',
            'IdActiveType' => 'Tipo Activo',
            'IdState' => 'Estado',
            'uploadFile' => 'Cargar desde Archivo',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getActiveType()
    {
        return $this->hasOne(Activetype::class, ['Id' => 'IdActiveType']);
    }

    public function getActiveTypes($field = 'Name'){
        try {
            $droptions = Activetype::find()
                ->select(['Id', 'Name'])
                ->where(['KeyWord'=>StringHelper::basename(self::class)])
                ->asArray()
                ->all();
            return ArrayHelper::map($droptions, 'Id', $field);
        } catch (Exception $ex) {
            throw $ex;
        }
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getComponentType()
    {
        return $this->hasOne(Type::class, ['Id' => 'IdComponentType']);
    }
    
    public function getComponentTypes($field = 'Name'){
        try {
            $droptions = Type::find()
                ->select(['Id', 'Name', 'Code'])
                ->where(['KeyWord'=>StringHelper::basename(self::class)])
                ->asArray()
                ->all();
            return ArrayHelper::map($droptions, 'Id', $field);
        } catch (Exception $ex) {
            throw $ex;
        }
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getState()
    {
        return $this->hasOne(State::class, ['Id' => 'IdState']);
    }

    public function getStates(){
        try {
            $droptions = State::find()
                ->select( [ 'Id', 'Name' ] )
                ->where(['KeyWord'=>StringHelper::basename(self::class)])
                ->asArray()
                ->all();
            return ArrayHelper::map($droptions, 'Id', 'Name');
        } catch (Exception $ex) {
            throw $ex;
        }
    }
    /**
     * @return ActiveQuery
     * */
    public function getSolutions(){
        return $this->hasMany( Problemtypesolution::class, [ 'IdProblem' => 'Id']);
    }

    /**
     * @throws Exception
     */
    public static function getList($q = null, $idparent = null){
        $query = self::find()
            ->select([
                self::tableName().'.Id as id',
                self::tableName().".Name as text"])
            ->innerJoin( 'state a', self::tableName().'.IdState = a.Id')
            ->where([
                self::tableName().'.IdActiveType' => $idparent,
                'a.Code' => self::STATE_ACTIVE,
            ]);
        if( !empty($q) ){
            $query->andWhere(['like',self::tableName().".Name", $q]);
        }
        return $query->asArray()
            ->all();
    }
    
}
