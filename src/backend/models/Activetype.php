<?php

namespace backend\models;

use backend\models\traits\Activetypetrait;
use Yii;
use common\models\State;
use yii\helpers\StringHelper;
use yii\helpers\ArrayHelper;
use common\models\Type;

/**
 * This is the model class for table "activetype".
 *
 * @property int $Id
 * @property string $Name
 * @property int $IdState
 * @property int $IdCategoryType
 * @property string $Description
 *
 * @property Incidentcategory $categoryType
 * @property State $state
 * @property Problemtype[] $problemtypes
 */
class Activetype extends \yii\db\ActiveRecord
{
    use Activetypetrait;
    
    const STATUS_ACTIVE = 'ACT';
    const STATUS_INACTIVE = 'INA';

    const SCENARIO_UPLOAD = 'upload';
    public $uploadFile = null;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'activetype';
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios[ self::SCENARIO_UPLOAD ] = [
            'Id','Name', 'IdState', 'IdCategoryType', 'Description'
        ];
        return $scenarios;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['Name', 'IdState', 'IdCategoryType'], 'required','on' =>'default'],
            [['Name', 'IdCategoryType'], 'required', 'on' => self::SCENARIO_UPLOAD ],
            [['IdState', 'IdCategoryType'], 'integer'],
            [['Name'], 'string', 'max' => 100],
            [['Description'], 'string', 'max' => 500],
            [['IdCategoryType'], 'exist', 'skipOnError' => true, 'targetClass' => Incidentcategory::class, 'targetAttribute' => ['IdCategoryType' => 'Id']],
            [['IdState'], 'exist', 'skipOnError' => true, 'targetClass' => State::class, 'targetAttribute' => ['IdState' => 'Id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'Id' => 'ID',
            'Name' => 'Nombre',
            'IdState' => 'Estado',
            'IdCategoryType' => 'Tipo de Categoría',
            'Description' => 'Descripción',
            'uploadFile' => 'Cargar desde Archivo',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategoryType()
    {
        return $this->hasOne(Incidentcategory::class, ['Id' => 'IdCategoryType']);
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategorytypes()
    {
        $droptions = Incidentcategory::findAll([]);
        return ArrayHelper::map($droptions, 'Id', 'Name');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getState()
    {
        return $this->hasOne(State::class, ['Id' => 'IdState']);
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStates(){
        try {
            $droptions = State::findAll(['KeyWord'=>StringHelper::basename(self::class)]);
            return ArrayHelper::map($droptions, 'Id', 'Name');
        } catch (Exception $ex) {
            throw $ex;
        }
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProblemtypes()
    {
        return $this->hasMany(Problemtype::class, ['IdActiveType' => 'Id']);
    }

    /**
     * @throws Exception
     */
    public static function getList($q = null, $idparent = null){
        $query = self::find()
            ->select([
                self::tableName().'.Id as id',
                self::tableName().".Name as text",
                self::tableName().".IdState",
            ])
            ->joinWith( 'state a')
            ->where([
                self::tableName().'.IdCategoryType' => $idparent,
                'a.Code' => self::STATUS_ACTIVE,
            ]);
        if( !empty($q) ){
            $query->andWhere(['like',self::tableName().".Name", $q]);
        }
        return $query->asArray()
            ->all();
    }
}
