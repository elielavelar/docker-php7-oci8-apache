<?php

namespace backend\models;

use backend\models\traits\Incidentrequesttrait;
use common\models\Attachment;
use common\models\Resource;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;
use yii\helpers\StringHelper;
use Exception;

use common\models\User;
use common\models\Type;
use common\models\State;
use common\models\Servicecentre;
use backend\models\Incidentrequestdetail;

/**
 * This is the model class for table "incidentrequest".
 *
 * @property int $Id
 * @property int $IdResource
 * @property int $IdTitle
 * @property int $IdCategoryType
 * @property int|null $IdSubCategoryType
 * @property int $IdServiceCentre
 * @property int $IdReportUser
 * @property string $RequestDate
 * @property string $IncidentDate
 * @property string $InterruptDate
 * @property int $IdInterruptType
 * @property int $IdRevisionType
 * @property int $IdPriorityType
 * @property int $IdUser
 * @property int $IdCreateUser
 * @property int|null $IdApprovedUser
 * @property int|null $IdState
 * @property string $TokenId
 * @property string|null $Description
 * @property string $Code
 * @property int|null $IdRejectUser
 * @property string|null $RejectDate
 * @property string|null $ApprovedDate
 *
 * @property User $approvedUser
 * @property Incidentcategory $categoryType
 * @property Type $priorityType
 * @property User $rejectUser
 * @property User $reportUser
 * @property Servicecentre $serviceCentre
 * @property State $state
 * @property Incidentcategory $subCategoryType
 * @property User $user
 * @property Resource $resource
 * @property Type $interruptType
 * @property Type $revisionType
 * @property Incidentrequestdetail[] $requestdetails
 * @property Incident $incident read-only
 * @property Incidenttitle $title
 * @var Incident $_model
 */

class Incidentrequest extends \yii\db\ActiveRecord
{
    use Incidentrequesttrait;
    const STATUS_REGISTRED = 'RGS';
    const STATUS_APPROVED = 'APR';
    const STATUS_INPROCESS = 'PRC';
    const STATUS_ASIGNMENT= 'ASG';
    const STATUS_REJECTED = 'REJ';
    const STATUS_CLOSED = 'CLS';

    const SCENARIO_WIZARD_STEP1 = 'step1';
    const SCENARIO_WIZARD_STEP2 = 'step2';
    const SCENARIO_WIZARD_STEP3 = 'step3';
    const INTERRUPT_TYPE_WITHOUT = 'SINT';
    const INTERRUPT_TYPE_LOCAL_PARTIAL = 'LOCP';
    const INTERRUPT_TYPE_LOCAL_TOTAL = 'LOCT';
    const INTERRUPT_TYPE_GLOBAL_PARTIAL = 'GLOBP';
    const INTERRUPT_TYPE_GLOBAL_TOTAL = 'GLOBT';

    public $fileattachment = [];
    public $steps = [];
    private $_model = null;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'incidentrequest';
    }

    public function behaviors() {

        $behaviors = parent::behaviors();
        $behaviors['timestamp'] = [
            'class' => TimestampBehavior::class,
            'attributes' => [
                ActiveRecord::EVENT_BEFORE_INSERT => ['RequestDate', 'IncidentDate'],
            ],
            'value'=> new Expression('NOW()'),
        ];
        return $behaviors;
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios[ self::SCENARIO_WIZARD_STEP1 ] = [
            'IdCategoryType', 'IdSubCategoryType'
        ];
        $scenarios[ self::SCENARIO_WIZARD_STEP2 ] = [
            'IdServiceCentre', 'IdReportUser'
        ];
        return $scenarios;
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['IdCategoryType', 'IdSubCategoryType', 'IdServiceCentre', 'IdReportUser', 'IdPriorityType', 'IdUser'
                , 'IdCreateUser', 'IdApprovedUser', 'IdState', 'IdRejectUser', 'IdResource'
                , 'IdInterruptType', 'IdRevisionType', 'IdTitle'
                ], 'integer'],
            [['IdServiceCentre', 'IdReportUser', 'IdPriorityType', 'IdUser', 'IdCreateUser'
                , 'Description', 'IdCategoryType', 'IdTitle', 'IdInterruptType', 'IdRevisionType']
                , 'required'],
            [['RequestDate', 'IncidentDate', 'RejectDate', 'ApprovedDate', 'InterruptDate'], 'safe'],
            [['Description'], 'string'],
            [['TokenId'], 'string', 'max' => 64],
            [['Code'], 'string', 'max' => 30],
            [['Code'], 'unique'],
            [['IdApprovedUser'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['IdApprovedUser' => 'Id']],
            [['IdCategoryType'], 'exist', 'skipOnError' => true, 'targetClass' => Incidentcategory::class, 'targetAttribute' => ['IdCategoryType' => 'Id']],
            [['IdPriorityType'], 'exist', 'skipOnError' => true, 'targetClass' => Type::class, 'targetAttribute' => ['IdPriorityType' => 'Id']],
            [['IdRejectUser'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['IdRejectUser' => 'Id']],
            [['IdReportUser'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['IdReportUser' => 'Id']],
            [['IdServiceCentre'], 'exist', 'skipOnError' => true, 'targetClass' => Servicecentre::class, 'targetAttribute' => ['IdServiceCentre' => 'Id']],
            [['IdState'], 'exist', 'skipOnError' => true, 'targetClass' => State::class, 'targetAttribute' => ['IdState' => 'Id']],
            [['IdSubCategoryType'], 'exist', 'skipOnError' => true, 'targetClass' => Incidentcategory::class, 'targetAttribute' => ['IdSubCategoryType' => 'Id']],
            [['IdCreateUser'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['IdCreateUser' => 'Id']],
            [['IdUser'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['IdUser' => 'Id']],
            [['IdTitle'], 'exist', 'skipOnError' => true, 'targetClass' => Incidenttitle::class, 'targetAttribute' => ['IdTitle' => 'Id']],
            [['IdResource'], 'exist', 'skipOnError' => true, 'targetClass' => Resource::class, 'targetAttribute' => ['IdResource' => 'Id']],
            [['IdInterruptType'], 'exist', 'skipOnError' => true, 'targetClass' => Type::class, 'targetAttribute' => ['IdInterruptType' => 'Id']],
            [['IdRevisionType'], 'exist', 'skipOnError' => true, 'targetClass' => Type::class, 'targetAttribute' => ['IdRevisionType' => 'Id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'Id' => Yii::t('system', 'ID'),
            'IdTitle' => Yii::t('system', 'Title'),
            'IdCategoryType' => Yii::t('system', 'Category'),
            'IdSubCategoryType' => Yii::t('system', 'Subcategory'),
            'IdServiceCentre' => Yii::t('system', 'Id Service Centre'),
            'IdReportUser' => Yii::t('system', 'Report User'),
            'RequestDate' => Yii::t('system', 'Request Date'),
            'IncidentDate' => Yii::t('system', 'Incident Date'),
            'IdPriorityType' => Yii::t('system', 'Priority'),
            'IdCreateUser' => Yii::t('system', 'Create User'),
            'IdUser' => Yii::t('app', 'User'),
            'IdApprovedUser' => Yii::t('system', 'Id Approved User'),
            'IdState' => Yii::t('system', 'Id State'),
            'TokenId' => Yii::t('system', 'Token ID'),
            'Description' => Yii::t('system', 'Description'),
            'Code' => Yii::t('system', 'Code'),
            'IdResource' => Yii::t('system', 'Resource'),
            'IdRejectUser' => Yii::t('system', 'Id Reject User'),
            'RejectDate' => Yii::t('system', 'Reject Date'),
            'ApprovedDate' => Yii::t('system', 'Approved Date'),
            'InterruptDate' => Yii::t('system', 'Interrupt Date'),
            'IdInterruptType' => Yii::t('system', 'Interrupt Type'),
            'IdRevisionType' => Yii::t('system', 'Revision Date'),
            'fileattachment' => Yii::t('app', 'Attachments'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTitle()
    {
        return $this->hasOne(Incidenttitle::class, ['Id' => 'IdTitle']);
    }

    /**
     * @return array
     */
    public function getTitles(){
        return (new Incident())->getTitles();
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getApprovedUser()
    {
        return $this->hasOne(User::class, ['Id' => 'IdApprovedUser']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getResource()
    {
        return $this->hasOne(Resource::class, ['Id' => 'IdResource']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategoryType()
    {
        return $this->hasOne(Incidentcategory::class, ['Id' => 'IdCategoryType']);
    }

    public function getCategoryTypes(){
        return (new Incident())->getCategoryTypes();
    }

    /**
     * @return ActiveQuery
     */
    public function getInterruptType(){
        return $this->hasOne( Type::class, ['Id' => 'IdInterruptType']);
    }

    /**
     * @return array
     */
    public function getRevisionTypes(){
        return (new Incident())->getRevisionTypes();
    }

    /**
     * @return ActiveQuery
     */
    public function getRevisionType(){
        return $this->hasOne( Type::class, ['Id' => 'IdRevisionType']);
    }

    /**
     * @return array
     */
    public function getInterruptTypes(){
        return (new Incident())->getInterruptTypes();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPriorityType()
    {
        return $this->hasOne(Type::class, ['Id' => 'IdPriorityType']);
    }

    /**
     * @return array
     * @throws Exception
     */
    public function getPriorityTypes(){
        return (new Incident())->getPriorityTypes();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRejectUser()
    {
        return $this->hasOne(User::class, ['Id' => 'IdRejectUser']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getReportUser()
    {
        return $this->hasOne(User::class, ['Id' => 'IdReportUser']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getServiceCentre()
    {
        return $this->hasOne(Servicecentre::class, ['Id' => 'IdServiceCentre']);
    }


    public function getServiceCentres(){
        return (new Incident())->getServicecentres();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getState()
    {
        return $this->hasOne(State::class, ['Id' => 'IdState']);
    }

    public function getStates(){
        return State::getAll(
            StringHelper::basename( Incidentrequest::class ),
            true,
            function( $result ){
                return ArrayHelper::map($result, 'Id', 'Name');
            }
        );
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSubCategoryType()
    {
        return $this->hasOne(Incidentcategory::class, ['Id' => 'IdSubCategoryType']);
    }

    /**
     * @return array
     * @throws Exception
     */
    public function getSubCategoryTypes(){
        $model = new Incident();
        $model->IdCategoryType = $this->IdCategoryType;
        return $model->getSubCategoryTypes();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::class, ['Id' => 'IdUser']);
    }

    /**
     * @return array
     * @throws Exception
     */
    public function getTechnicians(){
        return (new Incident())->getTechnicians();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreateUser()
    {
        return $this->hasOne(User::class, ['Id' => 'IdCreateUser']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAttachments()
    {
        return Attachment::findAll([
            'KeyWord' => StringHelper::basename(self::class),
            'AttributeName' => 'Id',
            'AttributeValue' => $this->Id,
        ]);
    }

    private function _generateNumCode (){
        try {
            $date = date('ymd');
            $service = Servicecentre::find()->select('MBCode')->where(['Id'=> $this->IdServiceCentre])->scalar();
            $id = (int) $this->_getLastId() + 1;
            $this->Code = $date.str_pad($service,3,'0', STR_PAD_LEFT).str_pad($id,4,'0',STR_PAD_LEFT);
        } catch (Exception $ex) {
            throw $ex;
        }
    }

    private function _getLastId(){
        try {
            return self::find()->max('Id');
        } catch (Exception $ex) {
            throw $ex;
        }
    }

    private function _assignDefaultUser(){
        try {
            $user = Yii::$app->getUser()->getIdentity()->getId();
            $this->IdUser = $user;
        } catch (Exception $ex) {
            throw $ex;
        }
    }

    public function getWitoutInterruptType(){
        return Type::find()
            ->where([
                'KeyWord'=> StringHelper::basename(Incident::class).'Interrupt',
                'Code'=> Incident::INTERRUPT_TYPE_WITHOUT
            ])->select(['Id'])->scalar();
    }

    private function _formatOutDate(){
        try {
            $this->IncidentDate = $this->IncidentDate ?
                Yii::$app->getFormatter()->asDate($this->IncidentDate,'php:d-m-Y H:i:s')
                : $this->IncidentDate;
            $this->RequestDate = $this->RequestDate ?
                Yii::$app->getFormatter()->asDate($this->RequestDate,'php:d-m-Y H:i:s')
                : $this->RequestDate;
            $this->ApprovedDate = $this->ApprovedDate ?
                Yii::$app->getFormatter()->asDate($this->ApprovedDate,'php:d-m-Y H:i:s')
                : $this->ApprovedDate;
            $this->RejectDate = $this->RejectDate ?
                Yii::$app->getFormatter()->asDate($this->RejectDate,'php:d-m-Y H:i:s')
                : $this->RejectDate;
        } catch (Exception $ex) {
            throw $ex;
        }
    }

    public function beforeSave($insert) {
        try {
            $this->IncidentDate = Yii::$app->getFormatter()->asDate($this->IncidentDate, 'php:Y-m-d H:i:s');
            $this->RequestDate = Yii::$app->getFormatter()->asDate($this->RequestDate, 'php:Y-m-d H:i:s');
            $this->ApprovedDate = $this->ApprovedDate ? Yii::$app->getFormatter()->asDate($this->ApprovedDate,'php:Y-m-d H:i:s'):$this->ApprovedDate;
            $this->RejectDate = $this->RejectDate ? Yii::$app->getFormatter()->asDate($this->RejectDate,'php:Y-m-d H:i:s'):$this->RejectDate;

            if($this->isNewRecord){
                $this->TokenId = Yii::$app->getSecurity()->generateRandomString(64);
                $this->_generateNumCode();
                $this->IdState = State::find()->select('Id')->where(['KeyWord'=> StringHelper::basename(self::class),'Code'=> self::STATUS_REGISTRED])->scalar();
                $this->_assignDefaultUser();
            }
        } catch (Exception $ex) {
            throw $ex;
        }
        return parent::beforeSave($insert);
    }

    public function afterSave($insert, $changedAttributes) {
        try {
            $this->refresh();
            $this->_formatOutDate();
            !empty( $this->fileattachment ) ? $this->saveFiles() : null;
        } catch (Exception $ex) {
            throw $ex;
        }
        return parent::afterSave($insert, $changedAttributes);
    }

    public function afterFind()
    {
        $this->_formatOutDate();

        return parent::afterFind(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRequestdetails(){
        return $this->hasMany( Incidentrequestdetail::class, ['IdIncidentRequest' => 'Id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getIncident(){
        return $this->Id ? Incident::findOne(['IdIncidentRequest' => $this->Id]) : null;
    }

    /**
     * @return boolean
     */
    public function apply(){
        try {
            if(empty($this->_model)){
                $this->_setModel();
            }
            if($this->_model->save()){
                $this->IdState = State::find()->select('Id')->where(['KeyWord'=> StringHelper::basename(self::class),'Code'=> self::STATUS_APPROVED])->scalar();
                $this->ApprovedDate = date('d-m-Y H:i:s');
                $this->IdApprovedUser = Yii::$app->getUser()->getIdentity()->getId();
                $this->_copyAttachments();
                return $this->save();
            } else {
                $errors = Yii::$app->customFunctions->getErrors($this->_model->errors, false);
                $this->addError('Id', $errors);
                Yii::$app->appLog->setLog($this->getErrors(),  'error');
                throw new Exception($errors, 91000);
            }
            return false;
        } catch (Exception $exception){
            throw $exception;
        }
    }

    /**
     * @return void
     * @throws Exception
     */
    protected function _copyAttachments(){
        try {
            $this->refresh();
            $attachments = $this->getAttachments();
            $attachment = new Attachment();
            $attachment->KeyWord = StringHelper::basename( self::class);
            $attachment->AttributeValue = $this->Id;
            $attachment->AttributeName = 'Id';
            $attachment->setPath();
            foreach ($attachments as $file){
                $file->setPath();
                $incFile = new Attachment();
                $incFile->attributes = $file->attributes;
                $incFile->Id = null;
                $incFile->KeyWord =  StringHelper::basename( Incident::class);
                $incFile->AttributeName = 'Id';
                $incFile->AttributeValue = (string) $this->_model->Id;
                $incFile->setPath();
                if($incFile->save()){
                    $file->copy($incFile->basePath);
                } else {
                    Yii::$app->appLog->setLog($incFile->getErrors(),  'error');
                }
            }

        } catch (Exception $exception){
            throw $exception;
        }
    }

    protected function _setModel () {
        try {
            $this->_model = new Incident();
            $this->_model->attributes = $this->attributes;
            $this->_model->Commentaries = $this->Description;
            $this->_model->Id = null;
            $this->_model->IdIncidentRequest = $this->Id;
            $this->_model->TicketDate = date('d-m-Y H:i:s');
        } catch (Exception $exception){
            throw $exception;
        }
    }

    public function validateIncident(){
        try {
            $this->_setModel();
            if(!$this->_model->validate()){
                $errors = Yii::$app->customFunctions->getErrors($this->_model->errors, false);
                $this->addError('Id', $errors);
                Yii::$app->appLog->setLog($this->getErrors(),  'error');
                return false;
            }
            return true;
        } catch (Exception $exception){
            throw $exception;
        }
    }
}
