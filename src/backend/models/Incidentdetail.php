<?php

namespace backend\models;
use backend\controllers\CountryController;
use backend\models\traits\Incidentdetailtrait;
use common\models\State;
use common\models\Type;
use backend\models\Problemtype;
use common\models\User;
use backend\models\Settingdetail;
use backend\models\Incident;
use common\models\Attachment;

use Yii;
use yii\helpers\StringHelper;
use yii\helpers\ArrayHelper;
use Exception;
use yii\log\Logger;

/**
 * This is the model class for table "incidentdetail".
 *
 * @property int $Id
 * @property int $IdIncident
 * @property string $Description
 * @property string $DetailDate
 * @property string $RecordDate
 * @property string $OnSiteDate
 * @property string $SolutionDate
 * @property int $IdSupportType
 * @property int $IdProblemType
 * @property int $IdActiveType
 * @property int $IdActivityType
 * @property int $IdEvaluatorUser
 * @property int $IdEvaluationValue
 * @property int $IdIncidentState
 * @property int $EnableReclasification
 * @property int $IdCategoryType
 * @property int $IdSubCategoryType
 * @property string $TicketProv
 * @property string $CodEquipment
 * @property int $IdAssignedUser
 * @property int $IdUser
 * @property string $Commentaries
 *
 * @property User $assignedUser
 * @property User $evaluatorUser
 * @property Settingdetail $evaluationValue
 * @property Type $activityType
 * @property Incidentcategory $categoryType
 * @property Incidentcategory $subCategoryType
 * @property Problemtype $problemType
 * @property State $incidentState
 * @property Type $supportType
 * @property User $user
 * @property Incident $incident
 * @property Activetype $activeType
 * @property Attachment[] $attachments
 */
class Incidentdetail extends \yii\db\ActiveRecord
{
    use Incidentdetailtrait;
    protected $_newRecord = false;
    const SCENARIO_DEFAULT = 'default';
    const SCENARIO_ASSIGNMENT = 'assignment';
    const SCENARIO_FOLLOWING = 'following';
    const SCENARIO_REASSIGNMENT = 'reassignment';
    const SCENARIO_SOLVED = 'solved';
    const SCENARIO_CLOSE = 'close';
    const SCENARIO_CANCEL = 'cancel';
    const SCENARIO_EVALUATION = 'evaluation';

    const ACTIVITY_ASSIGNMENT = 'ASG';
    const ACTIVITY_FOLLOWING = 'FLLW';
    const ACTIVITY_SOLVED = 'RSV';
    const ACTIVITY_REASSIGNMENT = 'RASG';
    const ACTIVITY_CANCEL = 'CAN';
    const ACTIVITY_CLOSE = 'CLS';
    const ACTIVITY_EVALUATION = 'EVAL';

    const ASSIGNMENT_PROFILES = 'ASG';

    const ENABLED_RECLASIFICATION = 1;
    const DISABLED_RECLASIFICATION = 0;
    public $fileattachment = [];

    protected $activityState = [];
    protected $iconsByActivity = [];
    protected $classByActivity = [];
    protected $activityByState = [];
    protected $attributesByActivity = [];
    protected static $initialAttributes = [
        'Id', 'IdIncident','IdActivityType', 'RecordDate', 'DetailDate', 'Description',
        'IdUser', 'IdAssignedUser', 'fileattachment'
    ];

    /**
     * @throws Exception
     */
    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios[ self::SCENARIO_ASSIGNMENT ] =
            self::setAttributesByActivity( self::ACTIVITY_ASSIGNMENT);
        $scenarios[ self::SCENARIO_FOLLOWING ] =
            self::setAttributesByActivity( self::ACTIVITY_FOLLOWING);
        return $scenarios;
    }

    function __construct($config = array()) {
        $this->activityState = [
            self::ACTIVITY_ASSIGNMENT => Incident::STATE_ASSIGNED,
            self::ACTIVITY_FOLLOWING => Incident::STATE_INPROCESS,
            self::ACTIVITY_REASSIGNMENT => Incident::STATE_INPROCESS,
            self::ACTIVITY_SOLVED => Incident::STATE_SOLVED,
            self::ACTIVITY_EVALUATION => Incident::STATE_CLOSED,
            self::ACTIVITY_CLOSE => Incident::STATE_CLOSED,
            self::ACTIVITY_CANCEL => Incident::STATE_CANCELED,
        ];
        $this->iconsByActivity = [
            self::ACTIVITY_ASSIGNMENT => 'fas fa-user',
            self::ACTIVITY_FOLLOWING => 'fas fa-cogs',
            self::ACTIVITY_REASSIGNMENT => 'fas fa-people-arrows',
            self::ACTIVITY_SOLVED => 'fas fa-check-square',
            self::ACTIVITY_EVALUATION => 'fas fa-check-double',
            self::ACTIVITY_CLOSE => 'fas fa-archive',
            self::ACTIVITY_CANCEL => 'fas fa-times',
        ];
        $this->classByActivity = [
            self::ACTIVITY_ASSIGNMENT => 'info',
            self::ACTIVITY_FOLLOWING => 'navy',
            self::ACTIVITY_REASSIGNMENT => 'warning',
            self::ACTIVITY_SOLVED => 'success',
            self::ACTIVITY_EVALUATION => 'purple',
            self::ACTIVITY_CLOSE => 'gray-dark',
            self::ACTIVITY_CANCEL => 'danger',
        ];

        $this->activityByState = [
            Incident::STATE_ASSIGNED => [
                self::ACTIVITY_FOLLOWING,
                self::ACTIVITY_REASSIGNMENT,
                self::ACTIVITY_CANCEL,
                self::ACTIVITY_SOLVED,
            ],
            Incident::STATE_INPROCESS => [
                self::ACTIVITY_FOLLOWING,
                self::ACTIVITY_REASSIGNMENT,
                self::ACTIVITY_CANCEL,
                self::ACTIVITY_SOLVED,
            ],
            Incident::STATE_SOLVED => [
                self::ACTIVITY_CLOSE,
            ],
            Incident::STATE_CANCELED => [],
            Incident::STATE_CLOSED => [],
        ];
        return parent::__construct($config);
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'incidentdetail';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['IdIncident', 'IdActivityType', 'IdAssignedUser', 'IdUser'], 'required'],
            [['IdIncident', 'IdSupportType', 'IdProblemType', 'IdActivityType', 'IdEvaluatorUser', 'IdEvaluationValue',
                    'IdIncidentState', 'IdAssignedUser', 'IdUser',
                    'IdCategoryType', 'IdSubCategoryType', 'EnableReclasification', 'IdActiveType',
                ]
                , 'integer'],
            [['Description', 'Commentaries'], 'string'],
            [['DetailDate', 'RecordDate', 'OnSiteDate', 'SolutionDate'], 'safe'],
            [['TicketProv', 'CodEquipment'], 'string', 'max' => 100],
            [['IdAssignedUser'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['IdAssignedUser' => 'id']],
            [['IdEvaluatorUser'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['IdEvaluatorUser' => 'id']],
            [['IdEvaluationValue'], 'exist', 'skipOnError' => true, 'targetClass' => Settingdetail::class, 'targetAttribute' => ['IdEvaluationValue' => 'Id']],
            [['IdActivityType'], 'exist', 'skipOnError' => true, 'targetClass' => Type::class, 'targetAttribute' => ['IdActivityType' => 'Id']],
            [['IdProblemType'], 'exist', 'skipOnError' => true, 'targetClass' => Problemtype::class, 'targetAttribute' => ['IdProblemType' => 'Id']],
            [['IdIncidentState'], 'exist', 'skipOnError' => true, 'targetClass' => State::class, 'targetAttribute' => ['IdIncidentState' => 'Id']],
            [['IdSupportType'], 'exist', 'skipOnError' => true, 'targetClass' => Type::class, 'targetAttribute' => ['IdSupportType' => 'Id']],
            [['IdUser'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['IdUser' => 'id']],
            [['IdIncident'], 'exist', 'skipOnError' => true, 'targetClass' => Incident::class, 'targetAttribute' => ['IdIncident' => 'Id']],
            [['IdCategoryType'], 'exist', 'skipOnError' => true, 'targetClass' => Incidentcategory::class, 'targetAttribute' => ['IdCategoryType' => 'Id']],
            [['IdSubCategoryType'], 'exist', 'skipOnError' => true, 'targetClass' => Incidentcategory::class, 'targetAttribute' => ['IdSubCategoryType' => 'Id']],
            [['IdActiveType'], 'exist', 'skipOnError' => true, 'targetClass' => Activetype::class, 'targetAttribute' => ['IdActiveType' => 'Id']],
            [['EnableReclasification'],'in', 'range' => [self::ENABLED_RECLASIFICATION, self::DISABLED_RECLASIFICATION]],
            ['EnableReclasification', 'default', 'value' => self::DISABLED_RECLASIFICATION],
            ['EnableReclasification', function($model, $attribute){
                return false;
            }, 'message' => 'Debe seleccionar Categorias','on' => ['create', 'update']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'Id' => 'ID',
            'IdIncident' => 'Incidencia',
            'Description' => 'Descripci贸n',
            'DetailDate' => 'Fecha Detalle',
            'RecordDate' => 'Fecha Registro',
            'OnSiteDate' => 'Fecha en Sitio',
            'SolutionDate' => 'Fecha Soluci贸n',
            'IdSupportType' => 'Tipo de Soporte',
            'IdProblemType' => 'Tipo de Problema',
            'IdActivityType' => 'Tipo de Actividad',
            'IdActiveType' => 'Activo',
            'IdEvaluatorUser' => 'Evaluador',
            'IdEvaluationValue' => 'Evaluaci贸n',
            'IdIncidentState' => 'Estado Ticket',
            'TicketProv' => 'Ticket Proveedor',
            'CodEquipment' => 'C贸digo Equipo',
            'IdAssignedUser' => 'Usuario Asignado',
            'IdUser' => 'Usuario',
            'Commentaries' => 'Comentarios',
            'EnableReclasification' => 'Reclasificar',
            'IdCategoryType' => 'Tipo Incidencia',
            'IdSubCategoryType' => 'SubTipo Incidencia',
            'fileattachment' => Yii::t('app', 'Attachments'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAssignedUser()
    {
        return $this->hasOne(User::class, ['Id' => 'IdAssignedUser']);
    }
    
    

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEvaluatorUser()
    {
        return $this->hasOne(User::class, ['Id' => 'IdEvaluatorUser']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEvaluationValue()
    {
        return $this->hasOne(Settingdetail::class, ['Id' => 'IdEvaluationValue']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getActivityType()
    {
        return $this->hasOne(Type::class, ['Id' => 'IdActivityType']);
    }

    /**
     * @return \yii\db\ActiveQuery
     * @throws Exception
     */
    public function getActivityTypes()
    {
        $query = Type::find()
            ->select(['Id', 'Name', 'Code'])
            ->where([
            'KeyWord' => StringHelper::basename(Incidentdetail::class).'Activity',
        ]);
        if($this->IdIncident){
            $query->andWhere([
                'Code' => ArrayHelper::getValue( $this->activityByState, $this->incident->state->Code, [])
            ]);
        }
        $types = $query->asArray()->all();
        return ArrayHelper::map($types, 'Id', 'Name');
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getActiveType()
    {
        return $this->hasOne(Activetype::class, ['Id' => 'IdActiveType']);
    }

    /**
     * @return \yii\db\ActiveQuery
     * @throws Exception
     */
    public function getActiveTypes()
    {
        $query = Activetype::find()
            ->select(['Id', 'Name']);
        $query->andWhere([
            'IdCategoryType' => $this->IdCategoryType ?: ( $this->IdIncident ? $this->incident->IdCategoryType : null)
        ]);
        $types = $query->asArray()->all();
        return ArrayHelper::map($types, 'Id', 'Name');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProblemType()
    {
        return $this->hasOne(Problemtype::class, ['Id' => 'IdProblemType']);
    }

    /**
     * @return array
     */
    public function getProblemTypes(){
        $query = Problemtype::find()
            ->select(['Id', 'Name']);
        $query->andWhere([
            'IdActiveType' => $this->IdActiveType
        ]);
        $types = $query->asArray()->all();
        return ArrayHelper::map($types, 'Id', 'Name');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIncidentState()
    {
        return $this->hasOne(State::class, ['Id' => 'IdIncidentState']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSupportType()
    {
        return $this->hasOne(Type::class, ['Id' => 'IdSupportType']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSupportTypes()
    {
        try {
            $droptions = Type::find()
                ->select([
                    Type::tableName().'.Id',
                    Type::tableName().'.Name',
                    Type::tableName().'.IdState'
                ])
                ->innerJoinWith('state b')
                ->where([
                    Type::tableName().'.KeyWord'=> StringHelper::basename(Incident::class)."Support",
                    'b.Code'=> Type::STATUS_ACTIVE
                ])
                ->orderBy([ Type::tableName().'.Id'=>'ASC' ])
                ->asArray()
                ->all();
            return ArrayHelper::map($droptions, 'Id', 'Name');
        } catch (Exception $ex) {
            throw $ex;
        }
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::class, ['Id' => 'IdUser']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIncident()
    {
        return $this->hasOne(Incident::class, ['Id' => 'IdIncident']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategoryType()
    {
        return $this->hasOne(Incidentcategory::class, ['Id' => 'IdCategoryType']);
    }

    public function getCategoryTypes(){
        try {
            return (new Incident())->getCategoryTypes();
        } catch (Exception $ex) {
            throw $ex;
        }
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSubCategoryType()
    {
        return $this->hasOne(Incidentcategory::class, ['Id' => 'IdSubCategoryType']);
    }

    public function getSubCategoryTypes(){
        try {
            $params = [
                'IdCategoryType' => $this->IdCategoryType ?: ( $this->IdIncident ? $this->incident->IdCategoryType : null),
            ];
            return ( new Incident($params))->getSubCategoryTypes();
        } catch (Exception $ex) {
            throw $ex;
        }
    }

    public function getTechnicians(){
        try {
            return ( new Incident())->getTechnicians();
        } catch (Exception $ex) {
            throw $ex;
        }
    }

    public function getEnableReclasifitionTypes(){
        return [
            self::DISABLED_RECLASIFICATION => Yii::t( 'app', 'No'),
            self::ENABLED_RECLASIFICATION => Yii::t('app', 'Yes')
        ];
    }
    
    public function beforeSave($insert) {
        try {
            $this->RecordDate = $this->RecordDate ?
                Yii::$app->getFormatter()->asDate($this->RecordDate, 'php:Y-m-d H:i:s') :
                $this->RecordDate;
            $this->DetailDate = $this->DetailDate ?
                Yii::$app->getFormatter()->asDate($this->DetailDate, 'php:Y-m-d H:i:s') :
                $this->DetailDate;
            $this->_newRecord = $this->isNewRecord;
            $this->isNewRecord ?
                $this->_setState()
                : null;
        } catch (Exception $ex) {
            throw $ex;
        }
        return parent::beforeSave($insert);
    }
    
    public function afterSave($insert, $changedAttributes) {
        try {
            //$this->_newRecord ?
            if($this->_newRecord){
                $this->_updateParentIncident();
            }
            !empty( $this->fileattachment ) ? $this->saveFiles() : null;

                //: null;
        } catch (Exception $ex) {
            throw $ex;
        }
        return parent::afterSave($insert, $changedAttributes);
    }

    private function _setState(){
        try {
            $this->IdIncidentState = State::find()->where([
                'KeyWord' => StringHelper::basename( Incident::class),
                'Code' => ArrayHelper::getValue($this->activityState
                    , ($this->IdActivityType
                        ? $this->activityType->Code
                        : self::ACTIVITY_FOLLOWING ), self::ACTIVITY_FOLLOWING),
            ])->select(['Id'])->scalar();
        } catch( Exception $exception ){
            throw $exception;
        }
    }

    private function _updateParentIncident()
    {
        try {
            $this->refresh();
            if($this->EnableReclasification == self::ENABLED_RECLASIFICATION){
                $this->incident->IdCategoryType = $this->IdCategoryType;
                $this->incident->IdSubCategoryType = $this->IdSubCategoryType;
            }
            $this->incident->IdUser = $this->IdAssignedUser;
            $this->incident->IdState = $this->IdIncidentState;
            if(!$this->incident->save()){
                $this->addError('IdIncident', Yii::$app->customFunctions->getErrors($this->incident->getErrors()));
                Yii::$app->appLog->setLog($this->incident->getErrors(),  'error');
            }
        } catch (Exception $exception){
            throw $exception;
        }
    }

}
